Class {
	#name : #CarvingAssertAmplifierTest,
	#superclass : #TestCase,
	#instVars : [
		'instance'
	],
	#category : #AmplificationTests
}

{ #category : #running }
CarvingAssertAmplifierTest >> setUp [
	"Hooks that subclasses may override to define the fixture of test."
instance := OLDCarvingAssertAmplifier new
	
]

{ #category : #tests }
CarvingAssertAmplifierTest >> testAssertionGenerationCollection [
	| aMethod aClass generatedClass observer |
	aMethod := RBParser
		parseMethod:
			'testFoo
	| array |
	array := OrderedCollection with: 56.
	array at: 1 put: someVariable.
	array add: someVariable + 10.
	array addAll: { 12 . 13 }.
	array add: someVariable * 4.
	array remove: someVariable.
	array at: 2 put: 3000.
	array removeAt: 2.
	array removeAll
	'.
	aClass := FakeTestcase.
	instance insertObservers: aMethod.
	generatedClass := instance buildAuxillaryClass: aMethod basedOn: aClass.
	generatedClass suite run.
	observer := generatedClass observer.
	ASTHelper new removeClass: generatedClass  source: self class name..
	instance insertAsserts: aMethod using: observer.
	self
		assert: (GeneralHelper renameTempVars: aMethod dump)
		equals:
			'RBMethodNode selector: #testFoo body: (RBSequenceNode temporaries: {RBVariableNode named: #array. RBVariableNode named: #tmp1. RBVariableNode named: #tmp2. RBVariableNode named: #tmp3. RBVariableNode named: #tmp4. RBVariableNode named: #tmp5. RBVariableNode named: #tmp6. RBVariableNode named: #tmp7. RBVariableNode named: #tmp8. } statements: {RBAssignmentNode variable: (RBVariableNode named: #array) value: (RBMessageNode receiver: (RBVariableNode named: #OrderedCollection) selector: #with: arguments: {RBLiteralValueNode value: 56. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 1. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp1) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #at:put: arguments: {RBLiteralValueNode value: 1. RBVariableNode named: #someVariable. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 1. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #tmp1. RBLiteralValueNode value: 1. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp2) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #add: arguments: {RBMessageNode receiver: (RBVariableNode named: #someVariable) selector: #+ arguments: {RBLiteralValueNode value: 10. }. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 2. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #tmp2. RBLiteralValueNode value: 11. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp2) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp3) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #addAll: arguments: {RBArrayNode statements: { RBLiteralValueNode value: 12. RBLiteralValueNode value: 13. }. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 4. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp3) selector: #size. RBLiteralValueNode value: 2. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp3) selector: #class. RBVariableNode named: #Array. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp4) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #add: arguments: {RBMessageNode receiver: (RBVariableNode named: #someVariable) selector: #* arguments: {RBLiteralValueNode value: 4. }. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 5. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #tmp4. RBLiteralValueNode value: 4. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp4) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp5) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #remove: arguments: {RBVariableNode named: #someVariable. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 4. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #tmp5. RBLiteralValueNode value: 1. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp5) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp6) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #at:put: arguments: {RBLiteralValueNode value: 2. RBLiteralValueNode value: 3000. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 4. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #tmp6. RBLiteralValueNode value: 3000. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp6) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp7) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #removeAt: arguments: {RBLiteralValueNode value: 2. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 3. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #tmp7. RBLiteralValueNode value: 3000. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp7) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp8) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #removeAll). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 0. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. })'
]

{ #category : #tests }
CarvingAssertAmplifierTest >> testAssertionGenerationCollection1 [
	| aMethod aClass generatedClass observer |
	aMethod := RBParser
		parseMethod:
			'testFoo
	| array |
	array := OrderedCollection new.
	array add: someVariable
	'.
	aClass := FakeTestcase.
	instance insertObservers: aMethod.
	generatedClass := instance buildAuxillaryClass: aMethod basedOn: aClass.
	generatedClass suite run.
	observer := generatedClass observer.
	ASTHelper new removeClass: generatedClass  source: self class name..
	instance insertAsserts: aMethod using: observer.
	self
		assert: (GeneralHelper renameTempVars: aMethod dump)
		equals:
			'RBMethodNode selector: #testFoo body: (RBSequenceNode temporaries: {RBVariableNode named: #array. RBVariableNode named: #tmp1. } statements: {RBAssignmentNode variable: (RBVariableNode named: #array) value: (RBMessageNode receiver: (RBVariableNode named: #OrderedCollection) selector: #new). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 0. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp1) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #add: arguments: {RBVariableNode named: #someVariable. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 1. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #tmp1. RBLiteralValueNode value: 1. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. })'
]

{ #category : #tests }
CarvingAssertAmplifierTest >> testAssertionGenerationCollectionAdd [
	| aMethod aClass generatedClass observer |
	aMethod := RBParser
		parseMethod:
			'testFoo
	| array |
	array := OrderedCollection with:10 with:20 with:30.
	array add: 40.
	array add: 11 after: 10.
	array add: 21 afterIndex: 3
	'.
	aClass := FakeTestcase.
	instance insertObservers: aMethod.
	generatedClass := instance buildAuxillaryClass: aMethod basedOn: aClass.
	generatedClass suite run.
	observer := generatedClass observer.
	ASTHelper new removeClass: generatedClass  source: self class name..
	instance insertAsserts: aMethod using: observer.
	self
		assert: (GeneralHelper renameTempVars: aMethod dump)
		equals:
			'RBMethodNode selector: #testFoo body: (RBSequenceNode temporaries: {RBVariableNode named: #array. RBVariableNode named: #tmp1. RBVariableNode named: #tmp2. RBVariableNode named: #tmp3. } statements: {RBAssignmentNode variable: (RBVariableNode named: #array) value: (RBMessageNode receiver: (RBVariableNode named: #OrderedCollection) selector: #with:with:with: arguments: {RBLiteralValueNode value: 10. RBLiteralValueNode value: 20. RBLiteralValueNode value: 30. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 3. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp1) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #add: arguments: {RBLiteralValueNode value: 40. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 4. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #tmp1. RBLiteralValueNode value: 40. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp2) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #add:after: arguments: {RBLiteralValueNode value: 11. RBLiteralValueNode value: 10. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 5. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #tmp2. RBLiteralValueNode value: 11. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp2) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp3) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #add:afterIndex: arguments: {RBLiteralValueNode value: 21. RBLiteralValueNode value: 3. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 6. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #tmp3. RBLiteralValueNode value: 21. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp3) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. })'
]

{ #category : #tests }
CarvingAssertAmplifierTest >> testAssertionGenerationCollectionChange [
	| aMethod aClass generatedClass observer |
	aMethod := RBParser
		parseMethod:
			'testFoo
	| array |
	array := OrderedCollection with:10 with:20 with:30.
	array at: 2 put: 2000
	'.
	aClass := FakeTestcase.
	instance insertObservers: aMethod.
	generatedClass := instance buildAuxillaryClass: aMethod basedOn: aClass.
	generatedClass suite run.
	observer := generatedClass observer.
	ASTHelper new removeClass: generatedClass  source: self class name..
	instance insertAsserts: aMethod using: observer.
	self
		assert: (GeneralHelper renameTempVars: aMethod dump)
		equals:
			'RBMethodNode selector: #testFoo body: (RBSequenceNode temporaries: {RBVariableNode named: #array. RBVariableNode named: #tmp1. } statements: {RBAssignmentNode variable: (RBVariableNode named: #array) value: (RBMessageNode receiver: (RBVariableNode named: #OrderedCollection) selector: #with:with:with: arguments: {RBLiteralValueNode value: 10. RBLiteralValueNode value: 20. RBLiteralValueNode value: 30. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 3. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp1) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #at:put: arguments: {RBLiteralValueNode value: 2. RBLiteralValueNode value: 2000. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 3. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #tmp1. RBLiteralValueNode value: 2000. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. })'
]

{ #category : #tests }
CarvingAssertAmplifierTest >> testAssertionGenerationCollectionRemove [
	| aMethod aClass generatedClass observer |
	aMethod := RBParser
		parseMethod:
			'testFoo
	| array |
	array := OrderedCollection with:10 with:20 with:30.
	array add: 40.
	array remove: 20
	'.
	aClass := FakeTestcase.
	instance insertObservers: aMethod.
	generatedClass := instance buildAuxillaryClass: aMethod basedOn: aClass.
	generatedClass suite run.
	observer := generatedClass observer.
	ASTHelper new removeClass: generatedClass  source: self class name..
	instance insertAsserts: aMethod using: observer.
	self
		assert: (GeneralHelper renameTempVars: aMethod dump)
		equals:
			'RBMethodNode selector: #testFoo body: (RBSequenceNode temporaries: {RBVariableNode named: #array. RBVariableNode named: #tmp1. RBVariableNode named: #tmp2. } statements: {RBAssignmentNode variable: (RBVariableNode named: #array) value: (RBMessageNode receiver: (RBVariableNode named: #OrderedCollection) selector: #with:with:with: arguments: {RBLiteralValueNode value: 10. RBLiteralValueNode value: 20. RBLiteralValueNode value: 30. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 3. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp1) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #add: arguments: {RBLiteralValueNode value: 40. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 4. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #tmp1. RBLiteralValueNode value: 40. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp2) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #remove: arguments: {RBLiteralValueNode value: 20. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 3. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #tmp2. RBLiteralValueNode value: 20. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp2) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. })'
]

{ #category : #tests }
CarvingAssertAmplifierTest >> testAssertionGenerationCollectionSize [
	| aMethod aClass generatedClass observer |
	aMethod := RBParser
		parseMethod:
			'testFoo
	| array |
	array := OrderedCollection with:10 with:20 with:30.
	array add: 40.
	array at: 1 put: 100.
	array remove: 20
	'.
	aClass := FakeTestcase.
	instance insertObservers: aMethod.
	generatedClass := instance buildAuxillaryClass: aMethod basedOn: aClass.
	generatedClass suite run.
	observer := generatedClass observer.
	ASTHelper new removeClass: generatedClass  source: self class name..
	instance insertAsserts: aMethod using: observer.
	self
		assert: (GeneralHelper renameTempVars: aMethod dump)
		equals:
			'RBMethodNode selector: #testFoo body: (RBSequenceNode temporaries: {RBVariableNode named: #array. RBVariableNode named: #tmp1. RBVariableNode named: #tmp2. RBVariableNode named: #tmp3. } statements: {RBAssignmentNode variable: (RBVariableNode named: #array) value: (RBMessageNode receiver: (RBVariableNode named: #OrderedCollection) selector: #with:with:with: arguments: {RBLiteralValueNode value: 10. RBLiteralValueNode value: 20. RBLiteralValueNode value: 30. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 3. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp1) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #add: arguments: {RBLiteralValueNode value: 40. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 4. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #tmp1. RBLiteralValueNode value: 40. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp2) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #at:put: arguments: {RBLiteralValueNode value: 1. RBLiteralValueNode value: 100. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 4. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #tmp2. RBLiteralValueNode value: 100. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp2) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp3) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #remove: arguments: {RBLiteralValueNode value: 20. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 3. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #tmp3. RBLiteralValueNode value: 20. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp3) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. })'
]

{ #category : #tests }
CarvingAssertAmplifierTest >> testAssertionGenerationComplex [
	| aMethod aClass generatedClass observer |
	aMethod := RBParser
		parseMethod:
			'testFoo
	| array |
	array := OrderedCollection with: 1@1.
	array add: (10@10).
	array add: (100@100).
	array at: 2 put: (23@23).
	array removeAt:3
	'.
	aClass := FakeTestcase.
	instance insertObservers: aMethod.
	generatedClass := instance buildAuxillaryClass: aMethod basedOn: aClass.
	generatedClass suite run.
	observer := generatedClass observer.
	ASTHelper new removeClass: generatedClass  source: self class name..
	instance insertAsserts: aMethod using: observer.
	self
		assert: (GeneralHelper renameTempVars: aMethod dump)
		equals:
			'RBMethodNode selector: #testFoo body: (RBSequenceNode temporaries: {RBVariableNode named: #array. RBVariableNode named: #tmp1. RBVariableNode named: #tmp2. RBVariableNode named: #tmp3. RBVariableNode named: #tmp4. } statements: {RBAssignmentNode variable: (RBVariableNode named: #array) value: (RBMessageNode receiver: (RBVariableNode named: #OrderedCollection) selector: #with: arguments: {RBMessageNode receiver: (RBLiteralValueNode value: 1) selector: #@ arguments: {RBLiteralValueNode value: 1. }. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 1. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp1) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #add: arguments: {RBMessageNode receiver: (RBLiteralValueNode value: 10) selector: #@ arguments: {RBLiteralValueNode value: 10. }. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 2. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #isPoint. RBLiteralValueNode value: true. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #isPoint) selector: #class. RBVariableNode named: #True. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #x. RBLiteralValueNode value: 10. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #x) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #isIntegerPoint. RBLiteralValueNode value: true. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #isIntegerPoint) selector: #class. RBVariableNode named: #True. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #isFloatPoint. RBLiteralValueNode value: false. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #isFloatPoint) selector: #class. RBVariableNode named: #False. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #y. RBLiteralValueNode value: 10. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #y) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #isZero. RBLiteralValueNode value: false. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #isZero) selector: #class. RBVariableNode named: #False. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #class. RBVariableNode named: #Point. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp2) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #add: arguments: {RBMessageNode receiver: (RBLiteralValueNode value: 100) selector: #@ arguments: {RBLiteralValueNode value: 100. }. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 3. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp2) selector: #isPoint. RBLiteralValueNode value: true. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp2) selector: #isPoint) selector: #class. RBVariableNode named: #True. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp2) selector: #x. RBLiteralValueNode value: 100. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp2) selector: #x) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp2) selector: #isIntegerPoint. RBLiteralValueNode value: true. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp2) selector: #isIntegerPoint) selector: #class. RBVariableNode named: #True. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp2) selector: #isFloatPoint. RBLiteralValueNode value: false. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp2) selector: #isFloatPoint) selector: #class. RBVariableNode named: #False. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp2) selector: #y. RBLiteralValueNode value: 100. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp2) selector: #y) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp2) selector: #isZero. RBLiteralValueNode value: false. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp2) selector: #isZero) selector: #class. RBVariableNode named: #False. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp2) selector: #class. RBVariableNode named: #Point. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp3) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #at:put: arguments: {RBLiteralValueNode value: 2. RBMessageNode receiver: (RBLiteralValueNode value: 23) selector: #@ arguments: {RBLiteralValueNode value: 23. }. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 3. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp3) selector: #isPoint. RBLiteralValueNode value: true. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp3) selector: #isPoint) selector: #class. RBVariableNode named: #True. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp3) selector: #x. RBLiteralValueNode value: 23. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp3) selector: #x) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp3) selector: #isIntegerPoint. RBLiteralValueNode value: true. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp3) selector: #isIntegerPoint) selector: #class. RBVariableNode named: #True. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp3) selector: #isFloatPoint. RBLiteralValueNode value: false. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp3) selector: #isFloatPoint) selector: #class. RBVariableNode named: #False. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp3) selector: #y. RBLiteralValueNode value: 23. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp3) selector: #y) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp3) selector: #isZero. RBLiteralValueNode value: false. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp3) selector: #isZero) selector: #class. RBVariableNode named: #False. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp3) selector: #class. RBVariableNode named: #Point. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp4) value: (RBMessageNode receiver: (RBVariableNode named: #array) selector: #removeAt: arguments: {RBLiteralValueNode value: 3. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #size. RBLiteralValueNode value: 2. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #array) selector: #class. RBVariableNode named: #OrderedCollection. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp4) selector: #isPoint. RBLiteralValueNode value: true. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp4) selector: #isPoint) selector: #class. RBVariableNode named: #True. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp4) selector: #x. RBLiteralValueNode value: 100. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp4) selector: #x) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp4) selector: #isIntegerPoint. RBLiteralValueNode value: true. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp4) selector: #isIntegerPoint) selector: #class. RBVariableNode named: #True. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp4) selector: #isFloatPoint. RBLiteralValueNode value: false. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp4) selector: #isFloatPoint) selector: #class. RBVariableNode named: #False. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp4) selector: #y. RBLiteralValueNode value: 100. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp4) selector: #y) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp4) selector: #isZero. RBLiteralValueNode value: false. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #tmp4) selector: #isZero) selector: #class. RBVariableNode named: #False. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp4) selector: #class. RBVariableNode named: #Point. RBLiteralValueNode value: ''smallAmp''. }. })'
]

{ #category : #tests }
CarvingAssertAmplifierTest >> testAssertionGenerationObject [
	| aMethod aClass generatedClass observer |
	aMethod := RBParser
		parseMethod:
			'testFoo
	| node node1 |
	node := 3@1.
	node := node + (10@10).
	node1 := node dist: (0@1)
	'.
	aClass := FakeTestcase.
	instance insertObservers: aMethod.
	generatedClass := instance buildAuxillaryClass: aMethod basedOn: aClass.
	generatedClass suite run.
	observer := generatedClass observer.
	ASTHelper new removeClass: generatedClass  source: self class name..
	instance insertAsserts: aMethod using: observer.
	self
		assert: (GeneralHelper renameTempVars: aMethod dump)
		equals:
			'RBMethodNode selector: #testFoo body: (RBSequenceNode temporaries: {RBVariableNode named: #node. RBVariableNode named: #node1. } statements: {RBAssignmentNode variable: (RBVariableNode named: #node) value: (RBMessageNode receiver: (RBLiteralValueNode value: 3) selector: #@ arguments: {RBLiteralValueNode value: 1. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #isPoint. RBLiteralValueNode value: true. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #isPoint) selector: #class. RBVariableNode named: #True. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #x. RBLiteralValueNode value: 3. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #x) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #isIntegerPoint. RBLiteralValueNode value: true. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #isIntegerPoint) selector: #class. RBVariableNode named: #True. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #isFloatPoint. RBLiteralValueNode value: false. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #isFloatPoint) selector: #class. RBVariableNode named: #False. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #y. RBLiteralValueNode value: 1. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #y) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #isZero. RBLiteralValueNode value: false. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #isZero) selector: #class. RBVariableNode named: #False. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #class. RBVariableNode named: #Point. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #node) value: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #+ arguments: {RBMessageNode receiver: (RBLiteralValueNode value: 10) selector: #@ arguments: {RBLiteralValueNode value: 10. }. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #isPoint. RBLiteralValueNode value: true. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #isPoint) selector: #class. RBVariableNode named: #True. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #x. RBLiteralValueNode value: 13. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #x) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #isIntegerPoint. RBLiteralValueNode value: true. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #isIntegerPoint) selector: #class. RBVariableNode named: #True. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #isFloatPoint. RBLiteralValueNode value: false. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #isFloatPoint) selector: #class. RBVariableNode named: #False. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #y. RBLiteralValueNode value: 11. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #y) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #isZero. RBLiteralValueNode value: false. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #isZero) selector: #class. RBVariableNode named: #False. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #class. RBVariableNode named: #Point. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #node1) value: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #dist: arguments: {RBMessageNode receiver: (RBLiteralValueNode value: 0) selector: #@ arguments: {RBLiteralValueNode value: 1. }. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #isPoint. RBLiteralValueNode value: true. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #isPoint) selector: #class. RBVariableNode named: #True. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #x. RBLiteralValueNode value: 13. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #x) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #isIntegerPoint. RBLiteralValueNode value: true. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #isIntegerPoint) selector: #class. RBVariableNode named: #True. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #isFloatPoint. RBLiteralValueNode value: false. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #isFloatPoint) selector: #class. RBVariableNode named: #False. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #y. RBLiteralValueNode value: 11. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #y) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #isZero. RBLiteralValueNode value: false. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #node) selector: #isZero) selector: #class. RBVariableNode named: #False. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node) selector: #class. RBVariableNode named: #Point. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #node1. RBLiteralValueNode value: 16.401219466856727. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #node1) selector: #class. RBVariableNode named: #SmallFloat64. RBLiteralValueNode value: ''smallAmp''. }. })'
]

{ #category : #tests }
CarvingAssertAmplifierTest >> testAssertionGenerationPrimitive [
	| aMethod aClass generatedClass observer |
	aMethod := RBParser
		parseMethod:
			'testFoo
	| tmp1|
	tmp1 := 1.
	someVariable := someVariable + tmp1.
	tmp1 := someVariable - 1.
	someString := someString, ''111'''.
	aClass := FakeTestcase.
	instance insertObservers: aMethod.
	generatedClass := instance buildAuxillaryClass: aMethod basedOn: aClass.
	generatedClass suite run.
	observer := generatedClass observer.
	ASTHelper new removeClass: generatedClass  source: self class name..
	instance insertAsserts: aMethod using: observer.
	self
		assert: (GeneralHelper renameTempVars: aMethod dump)
		equals:
			'RBMethodNode selector: #testFoo body: (RBSequenceNode temporaries: {RBVariableNode named: #tmp1. } statements: {RBAssignmentNode variable: (RBVariableNode named: #tmp1) value: (RBLiteralValueNode value: 1). RBAssignmentNode variable: (RBVariableNode named: #someVariable) value: (RBMessageNode receiver: (RBVariableNode named: #someVariable) selector: #+ arguments: {RBVariableNode named: #tmp1. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #someVariable. RBLiteralValueNode value: 2. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #someVariable) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp1) value: (RBMessageNode receiver: (RBVariableNode named: #someVariable) selector: #- arguments: {RBLiteralValueNode value: 1. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #someVariable. RBLiteralValueNode value: 2. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #someVariable) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #tmp1. RBLiteralValueNode value: 1. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #tmp1) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #someString) value: (RBMessageNode receiver: (RBVariableNode named: #someString) selector: #, arguments: {RBLiteralValueNode value: ''111''. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBVariableNode named: #someString. RBLiteralValueNode value: ''abcd111''. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #someString) selector: #class. RBVariableNode named: #ByteString. RBLiteralValueNode value: ''smallAmp''. }. })'
]

{ #category : #tests }
CarvingAssertAmplifierTest >> testAssertionGenerationRedundant [
	| aMethod aClass generatedClass observer |
	aMethod := RBParser
		parseMethod:
			'testFoo
	| b |
	b := SmallBank new.
	b deposit: 100.
	'.
	aClass := SmallBankTest .
	instance insertObservers: aMethod.
	generatedClass := instance buildAuxillaryClass: aMethod basedOn: aClass.
	generatedClass suite run.
	3
		timesRepeat: [ generatedClass observer resetFlakyDetection.
			generatedClass suite run.
			generatedClass observer checkFlaky ].	"Flaky detection"
	observer := generatedClass observer.
	
	"generatedClass removeFromSystem."
	instance insertAsserts: aMethod using: observer.
	self
		assert: (GeneralHelper renameTempVars: aMethod dump)
		equals:
			'RBMethodNode selector: #testFoo body: (RBSequenceNode temporaries: {RBVariableNode named: #b. RBVariableNode named: #tmp1. } statements: {RBAssignmentNode variable: (RBVariableNode named: #b) value: (RBMessageNode receiver: (RBVariableNode named: #SmallBank) selector: #new). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #b) selector: #balance. RBLiteralValueNode value: 0. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #b) selector: #balance) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #b) selector: #class. RBVariableNode named: #SmallBank. RBLiteralValueNode value: ''smallAmp''. }. RBAssignmentNode variable: (RBVariableNode named: #tmp1) value: (RBMessageNode receiver: (RBVariableNode named: #b) selector: #deposit: arguments: {RBLiteralValueNode value: 100. }). RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #b) selector: #balance. RBLiteralValueNode value: 100. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBMessageNode receiver: (RBVariableNode named: #b) selector: #balance) selector: #class. RBVariableNode named: #SmallInteger. RBLiteralValueNode value: ''smallAmp''. }. RBMessageNode receiver: (RBSelfNode named: #self) selector: #assert:equals:description: arguments: {RBMessageNode receiver: (RBVariableNode named: #b) selector: #class. RBVariableNode named: #SmallBank. RBLiteralValueNode value: ''smallAmp''. }. })'
]

{ #category : #tests }
CarvingAssertAmplifierTest >> testObservationCollection [
	| aMethod aClass generatedClass anArrayTime aStringNoTime |
	aMethod := RBParser
		parseMethod:
			'testFoo
	| tmp1 tmp2 |
	tmp1 := someString size.
	someString := someString , ''0''.
	tmp2 := Array
		with: 1
		with: 2'.
	aClass := FakeTestcase.
	instance insertObservers: aMethod.
	generatedClass := instance buildAuxillaryClass: aMethod basedOn: aClass.
	generatedClass suite run.
	anArrayTime := generatedClass observer memory
		collect: [ :item | item at: #time ].
	aStringNoTime := (generatedClass observer memory
		collect: [ :item | 
			item removeKey: #time.
			item ]) asString.
	ASTHelper new removeClass: generatedClass  source: self class name..
	self assert: anArrayTime sorted equals: anArrayTime.
	self
		assert: aStringNoTime
		equals:
			'an OrderedCollection(a Dictionary(#class->ByteString #id->1 #name->#someString #observedby->#observe #type->#primitive #value->''abcd'' ) a Dictionary(#class->SmallInteger #equalReceiver->false #id->2 #name->#tmp1 #observedby->#observeResult #type->#primitive #value->''4'' ) a Dictionary(#class->ByteString #id->3 #name->#someString #observedby->#observe #type->#primitive #value->''abcd0'' ) a Dictionary(#class->ByteString #equalReceiver->true #id->4 #name->#someString #observedby->#observeResult #type->#primitive #value->''abcd0'' ) a Dictionary(#id->5 #name->#Array #observedby->#observe ) a Dictionary(#class->Array #equalReceiver->false #id->6 #name->#tmp2 #observedby->#observeResult #type->#collection #value->an OrderedCollection(a Dictionary(#class->SmallInteger #type->#primitive #value->''1'' ) a Dictionary(#class->SmallInteger #type->#primitive #value->''2'' )) ))'
]
